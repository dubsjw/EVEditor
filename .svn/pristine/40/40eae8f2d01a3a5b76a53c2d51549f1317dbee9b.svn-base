#!/usr/bin/env python
# -*- coding: utf-8 -*-

__author__ = "Jacob Dubs"
__credits__ = ["Jacob Dubs"]
__version__ = "1.0.0"

# EVEditor imports
from ui_eveditor import Ui_EVEditor
import resources

# PyQt5 imports
from PyQt5.QtWidgets import QApplication, QMainWindow, QTableWidgetItem
from PyQt5 import QtGui, QtCore

# Python imports
import sys
import os



class EVEditor(QMainWindow):
    def __init__(self):
        super(EVEditor, self).__init__()
        
        # Setup the ui.
        self.ui = Ui_EVEditor()
        self.ui.setupUi(self)
        
        # Connect some signals.
        self.ui.exitButton.clicked.connect(self.onExitButtonClicked)
        self.ui.saveButton.clicked.connect(self.onSaveButtonClicked)
        
        self.SetupTableWidget()
        self.PopulateTable()
        
        
    def PopulateTable(self):
        # Grab all of the variables.
        variables = os.environ
        length = len(variables)
        currentrow = 0
        
        self.ui.evTableWidget.setRowCount(length)
        
        for key in variables:
            keytableitem = QTableWidgetItem()
            keytableitem.setData(QtCore.Qt.DisplayRole, key)
            
            valuetableitem = QTableWidgetItem()
            valuetableitem.setData(QtCore.Qt.DisplayRole, variables[key])
            
            self.ui.evTableWidget.setItem(currentrow, 0, keytableitem)
            self.ui.evTableWidget.setItem(currentrow, 1, valuetableitem)
            currentrow += 1
        
        
        
    # Setup the table widget
    def SetupTableWidget(self):
        # Setup the header labels.
        labels = ['Variable', 'Value']
        self.ui.evTableWidget.setHorizontalHeaderLabels(labels)
        
        # Expand the last header section.
        self.ui.evTableWidget.horizontalHeader().setStretchLastSection(True)
    
    # When the save button is clicked
    def onSaveButtonClicked(self):
        print ('Save button was clicked!')
    
    # When the exit button is clicked.
    def onExitButtonClicked(self):
        sys.exit(0)
        
if __name__ == '__main__':
    #Create the application.
    app = QApplication(sys.argv)
    
    # Setup the fusion theme.
    app.setStyle('Fusion')
    palette = QtGui.QPalette()
    palette.setColor(QtGui.QPalette.Window, QtGui.QColor(53,53,53))
    palette.setColor(QtGui.QPalette.WindowText, QtCore.Qt.white)
    palette.setColor(QtGui.QPalette.Base, QtGui.QColor(15,15,15))
    palette.setColor(QtGui.QPalette.AlternateBase, QtGui.QColor(53,53,53))
    palette.setColor(QtGui.QPalette.ToolTipBase, QtCore.Qt.white)
    palette.setColor(QtGui.QPalette.ToolTipText, QtCore.Qt.white)
    palette.setColor(QtGui.QPalette.Text, QtCore.Qt.white)
    palette.setColor(QtGui.QPalette.Button, QtGui.QColor(53,53,53))
    palette.setColor(QtGui.QPalette.ButtonText, QtCore.Qt.white)
    palette.setColor(QtGui.QPalette.BrightText, QtCore.Qt.red)
    palette.setColor(QtGui.QPalette.Highlight, QtGui.QColor(142,45,197).lighter())
    palette.setColor(QtGui.QPalette.HighlightedText, QtCore.Qt.black)
    app.setPalette(palette)
    
    eveditor = EVEditor()
    eveditor.setWindowIcon(QtGui.QIcon(':/icons/icon.png'))
    eveditor.show()
    returncode = app.exec()
    sys.exit(returncode)