#!/usr/bin/env python
# -*- coding: utf-8 -*-

__author__ = "Jacob Dubs"
__credits__ = ["Jacob Dubs"]
__version__ = "1.0.0"

# EVEditor imports
from ui_eveditor import Ui_EVEditor
from ui_valueeditor import Ui_ValueEditor
import resources

# PyQt5 imports
from PyQt5.QtWidgets import QApplication, QMainWindow, QTableWidgetItem, QDialog, QMessageBox
from PyQt5 import QtGui, QtCore

# Python imports
import sys
import os
import subprocess

class EVEditor(QMainWindow):
    def __init__(self):
        super(EVEditor, self).__init__()
        
        # Setup the ui.
        self.ui = Ui_EVEditor()
        self.ui.setupUi(self)
        
        # Connect some signals.
        self.ui.exitButton.clicked.connect(self.onExitButtonClicked)
        self.ui.actionQuit.triggered.connect(self.onExitButtonClicked)
        self.ui.saveButton.clicked.connect(self.onSaveButtonClicked)
        self.ui.actionSave.triggered.connect(self.onSaveButtonClicked)
        self.ui.evTableWidget.itemDoubleClicked.connect(self.onItemDoubleClicked)
        self.ui.actionAbout.triggered.connect(self.onAboutEVEditor)
        self.ui.actionAbout_Qt.triggered.connect(self.onAboutQt)
        
        # Start calling functions
        self.SetupTableWidget()
        self.PopulateTable()
        
        
    def PopulateTable(self):
        # Grab all of the variables.
        variables = os.environ
        length = len(variables)
        currentrow = 0
        
        #Setup the table.
        self.ui.evTableWidget.setRowCount(length)
        
        # Add environment variables to it.
        for key in variables:
            keytableitem = QTableWidgetItem()
            keytableitem.setData(QtCore.Qt.DisplayRole, key)
            
            valuetableitem = QTableWidgetItem()
            
            value = variables[key]
            valuetableitem.setData(QtCore.Qt.DisplayRole, value)
            
            # Does the value contain multiple evars?
            splitvalue = value.split(';')
            
            if(1 < len(splitvalue)):
                # Disable editing as we want a different editor to show on double click.
                valuetableitem.setFlags(valuetableitem.flags() & ~QtCore.Qt.ItemIsEditable)
            
            self.ui.evTableWidget.setItem(currentrow, 0, keytableitem)
            self.ui.evTableWidget.setItem(currentrow, 1, valuetableitem)
            currentrow += 1
        
        
    # Setup the table widget
    def SetupTableWidget(self):
        # Setup the header labels.
        labels = ['Variable', 'Value']
        self.ui.evTableWidget.setHorizontalHeaderLabels(labels)
        
        # Expand the last header section.
        self.ui.evTableWidget.horizontalHeader().setStretchLastSection(True)
        
        # Set the width of the first column to be about half of the total width.
        self.ui.evTableWidget.setColumnWidth(0, 300)
        
    # Item has been double clicked.
    def onItemDoubleClicked(self, item):
        flags = item.flags()
        
        # Custom edit with window because item has multiple values.
        if not flags & QtCore.Qt.ItemIsEditable:
            # Setup the dialog window.
            valueeditdialog = QDialog()
            valueeditdialog.setWindowIcon(QtGui.QIcon(':/icons/icon.png'))
            
            # Setup the ui.
            veUI = Ui_ValueEditor()
            veUI.setupUi(valueeditdialog)
            veUI.veSaveButton.clicked.connect(valueeditdialog.accept)
            veUI.veCancelButton.clicked.connect(valueeditdialog.reject)
            
            # Populate it with the values.
            text = item.text()
            values = text.split(';')
            
            veUI.veTableWidget.setRowCount(len(values))
            currentrow = 0
            
            # Set the values in the dialog.
            for value in values:
                valueitem = QTableWidgetItem()
                valueitem.setData(QtCore.Qt.DisplayRole, value)
                
                veUI.veTableWidget.setItem(currentrow, 0, valueitem)
                currentrow += 1
            
            # Show the dialog.
            status = valueeditdialog.exec()
            
            # Test for accept or reject.
            if QDialog.Accepted == status:
                rowcount = veUI.veTableWidget.rowCount()
                evString = ''
                
                # Grab values out of the dialog.
                for i in range(0, rowcount - 1):
                    evString += veUI.veTableWidget.item(i, 0).text() + ';'
                
                # Reflect the changes in the main dialog.
                item.setData(QtCore.Qt.DisplayRole, evString)
                
    # When the main about action is clicked.
    def onAboutEVEditor(self):
        QMessageBox.about(self, "About EVEditor", "Author: Jacob Dubs\nVersion: " + __version__ + "\nEVEditor is a simple environment variable editor.")
        
    # When the about qt action is clicked.
    def onAboutQt(self):
        QMessageBox.aboutQt(self, 'About Qt')
     
    # When the save button is clicked.
    def onSaveButtonClicked(self):
        # Set up some variables.
        rowcount = self.ui.evTableWidget.rowCount()
        evdict = {}
        
        # Grab all of the values from the tablewidget and save them.
        for i in range(0, rowcount):
            evKey = self.ui.evTableWidget.item(i, 0).text()
            evValue = self.ui.evTableWidget.item(i, 1).text()
            # Save in the dictionary.
            evdict[evKey] = evValue
        
        for key in evdict:
            subprocess.call(['cmd.exe', 'setx ' + key + ' ' + evdict[key]])
    
    # When the exit button is clicked.
    def onExitButtonClicked(self):
        sys.exit(0)
        
if __name__ == '__main__':
    #Create the application.
    app = QApplication(sys.argv)
    
    # Setup the fusion theme.
    app.setStyle('Fusion')
    palette = QtGui.QPalette()
    palette.setColor(QtGui.QPalette.Window, QtGui.QColor(53,53,53))
    palette.setColor(QtGui.QPalette.WindowText, QtCore.Qt.white)
    palette.setColor(QtGui.QPalette.Base, QtGui.QColor(15,15,15))
    palette.setColor(QtGui.QPalette.AlternateBase, QtGui.QColor(53,53,53))
    palette.setColor(QtGui.QPalette.ToolTipBase, QtCore.Qt.white)
    palette.setColor(QtGui.QPalette.ToolTipText, QtCore.Qt.white)
    palette.setColor(QtGui.QPalette.Text, QtCore.Qt.white)
    palette.setColor(QtGui.QPalette.Button, QtGui.QColor(53,53,53))
    palette.setColor(QtGui.QPalette.ButtonText, QtCore.Qt.white)
    palette.setColor(QtGui.QPalette.BrightText, QtCore.Qt.red)
    palette.setColor(QtGui.QPalette.Highlight, QtGui.QColor(142,45,197).lighter())
    palette.setColor(QtGui.QPalette.HighlightedText, QtCore.Qt.black)
    app.setPalette(palette)
    
    eveditor = EVEditor()
    eveditor.setWindowIcon(QtGui.QIcon(':/icons/icon.png'))
    eveditor.show()
    returncode = app.exec()
    sys.exit(returncode)